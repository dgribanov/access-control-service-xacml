play.application.loader = com.example.accesscontrol.admin.ws.api.impl.AccessControlAdminLoader

akka.persistence.journal.plugin = "akka.persistence.cassandra.journal"

cassandra-journal.keyspace = access_control_admin_ws_api
cassandra-snapshot-store.keyspace = access_control_admin_ws_api
lagom.persistence.read-side.cassandra.keyspace = access_control_admin_ws_api

cassandra-query-journal.first-time-bucket = "20220101T00:00"

# Finally, ensure that Cassandra is used for the journal and snapshot-store
# Lagom's Cassandra and JDBC persistence modules both define these properties,
# so the order they are applied is non-deterministic.
akka.persistence {
  journal {
    plugin = cassandra-journal
  }

  snapshot-store {
    plugin = cassandra-snapshot-store
  }
}

akka.actor {
  serialization-bindings {
    # Commands won't use play-json but Akka's jackson support.
    # See https://doc.akka.io/docs/akka/2.6/serialization-jackson.html
    "com.example.accesscontrol.admin.ws.api.impl.domain.PolicyCollection$CommandSerializable" = jackson-json
  }
}

# Akka Cluster configuration
# https://doc.akka.io/docs/akka-management/current/kubernetes-deployment/forming-a-cluster.html#akka-cluster
akka {
  loglevel = "DEBUG"

  # Set the actor provider to cluster.
  actor.provider = cluster

  # Exit the JVM on ActorSystem termination to allow Kubernetes to re-create it.
  coordinated-shutdown.exit-jvm = on

  cluster {
    # Shutdown if cluster formation doesnâ€™t work. This will cause Kubernetes to re-create the pod.
    shutdown-after-unsuccessful-join-seed-nodes = 60s
  }
}

# Akka Cluster Bootstrap configuration
# https://doc.akka.io/docs/akka-management/current/kubernetes-deployment/forming-a-cluster.html#akka-cluster-bootstrap
akka.management {
  cluster.bootstrap {
    contact-point-discovery {
      # we need to use a different discovery method for Cluster Bootstrap, and for Kubernetes,
      # the simplest method is to use the Kubernetes API as Cluster Bootstrap discovery method
      discovery-method = kubernetes-api
    }
  }
}
